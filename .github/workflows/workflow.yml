name: Flask Server

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v2 

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
         python-version: '3.10'
         cache: 'pip'

      - name: Install pip Dependencies
        run: |
            pip install -r requirements.txt
  
      - name: Setup MySQL
        uses: shogo82148/actions-setup-mysql@v1
        with:
            mysql-version: "8.0"
    
      - name: Cache MySQL
        uses: actions/cache@v2
        with:
          path: /tmp/mydb.sql
          key: ${{ runner.os }}-mysql-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-mysql-

      - run: |
          mysql -u root -p -e "CREATE DATABASE mydb;" && \
          mysql -u root mydb < /tmp/mydb.sql || mysql -u root -p mydb -e \
            "CREATE TABLE users (  \
              id INT NOT NULL PRIMARY KEY AUTO_INCREMENT, \
              first_name VARCHAR(20), \
              middle_name VARCHAR(20), \
              last_name VARCHAR(20), \
              age INT, \
              phone BIGINT, \
              email VARCHAR(30), \
              country VARCHAR(5), \
              username VARCHAR(30), \
              passhash VARCHAR(180), \
              salt VARCHAR(100));" && \
          mysql -u root mydb -e "desc users;" && \
          mysql -u root mydb -e "SELECT * from users;"
          
      - name: Starting application
        run: | 
            python app.py \
            '127.0.0.1' \
            '3306' \
            'root' \
            '' \
            'mydb' &
      
      - name: Set up ngrok
        run: sudo snap install ngrok --devmode && ngrok config add-authtoken ${{ secrets.NGROK_TOKEN }}
  
      # - name: cancel previous ngrok tunnel if running in other server
      #   run: |
      #       pwsh -Command "
      #       \$headers = @{ 
      #       'Authorization' = 'Bearer ${{ secrets.NGROK_API_KEY }}' 
      #       'Ngrok-Version' = '2' 
      #        }
      #       \$response = Invoke-WebRequest -Uri 'https://api.ngrok.com/tunnels' -Headers \$headers
      #       \$tunnel = $response.Content | ConvertFrom-Json | Select-Object -ExpandProperty tunnels
      #        Invoke-WebRequest -Uri 'https://api.ngrok.com/tunnels/' + \$tunnel.id -Method DELETE -Headers \$headers"
      
      - name: forward port to web
        run: ngrok http --domain=key-grizzly-directly.ngrok-free.app 5000

      # - run: sleep 600

      - run: |
          mysqldump -u root mydb > /tmp/mydb.sql
    
      - name: Trigger next workflow
        run: gh auth login --with-token <<<"${{ secrets.WORKFLOW_TOKEN }}" && gh workflow run workflow.yml



        # curl -H "Authorization: Bearer 2mw9PQgnaaCKoPI9a4h0INA65s9_6LKbXo1cT6kNTvaYK4Jj2" -H "Ngrok-Version: 2" https://api.ngrok.com/tunnel_sessions
  # restart:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2 
  #     - name: Trigger next workflow
  #       run: gh auth login --with-token <<<"${{ secrets.WORKFLOW_TOKEN }}" && gh workflow run workflow.yml
 
   






       
