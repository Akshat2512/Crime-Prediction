name: Flask Server

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v2 

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
         python-version: '3.10'
         cache: 'pip'

      - name: Install pip Dependencies
        run: |
            pip install -r requirements.txt

  
      - name: Set up ngrok
        run: sudo snap install ngrok --devmode && ngrok config add-authtoken ${{ secrets.NGROK_TOKEN }}

      - name: forward port to web
        run: |
           while true; do
                pkill ngrok || true
                ngrok http --domain=key-grizzly-directly.ngrok-free.app 5000 &
                sleep 18000
           done &
        shell: bash

      - name: Setup MySQL
        uses: shogo82148/actions-setup-mysql@v1
        with:
            mysql-version: "8.0"

      - name: Restore MySQL data
        uses: actions/cache@v2
        with:
          path: /tmp/mydb.sql
          key: ${{ runner.os }}-mysql-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-mysql-

      - run: mysql -u root mydb < /tmp/mydb.sql
       
      - run: |
          mysql -u root -p -e "CREATE DATABASE mydb;" && \
          mysql -u root -p mydb -e \
            "CREATE TABLE users (  \
              id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,  \
              first_name VARCHAR(20), \
              middle_name VARCHAR(20), \
              last_name VARCHAR(20), \
              age INT, \
              phone BIGINT, \
              email VARCHAR(30), \
              country VARCHAR(5), \
              username VARCHAR(30), \
              passhash VARCHAR(180), \
              salt VARCHAR(100));" && \
          mysql -u root mydb -e "desc users;"
          mysql -u root mydb -e "SELECT * from user;"
          
      - name: Starting application
        run: | 
            python app.py \
            'localhost' \
            '3306' \
            'root' \
            '' \
            'mydb' 

      - name: Dump MySQL database
        run: |
          mysqldump -u root mydb > /tmp/mydb.sql

      - name: Cache MySQL data
        if: always()
        uses: actions/cache@v2
        with:
          path: /tmp/mydb.sql
          key: ${{ runner.os }}-mysql-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-mysql-
      # - run: sleep 50
 

  






       
